/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <weaponmod>
#include <weaponmod_stocks>
#include <xs>

#define PLUGIN "WPN KATANA ( DC )"
#define VERSION "0.3X"
#define AUTHOR "SandStriker"

#define KATANA_COST 		25000
#define KATANA_RUN_SPEED 	800.0
#define KATANA_SWINGRATE 	0.8
#define KATANA_DISTANCE		100.0
#define KATANA_DAMAGE_MAX	200
#define KATANA_DAMAGE_MIN	100
#define KATANA_THROW_SPEED	1200
#define KATANA_THROW_OFFSET	60
#define KATANA_DAMAGE_MONSTER	300
#define KATANA_REMOVETIME	30

// Weapon information
new
	g_WPN_NAME[]	= "Sword Of The Nightmare Samurai",
	g_WPN_SHORT[]	= "sword",
	g_WPN_CLASS[]	= "katana_bolt";

// Models
new
	g_P_MODEL[]	= "models/wpnmod/p_katana.mdl",
	g_V_MODEL[]	= "models/wpnmod/v_katana.mdl",
	g_W_MODEL[]	= "models/wpnmod/w_katana.mdl";

// Sounds
new g_SOUND[][] = 
{
	"wpnmod/katana_draw_fcs.wav",
	"wpnmod/katana_hit1_fcs.wav",
	"wpnmod/katana_hitbod_fcs.wav",
	"wpnmod/katana_swing1_fcs.wav",
	"wpnmod/tknife_hit_fcs.wav",
	"wpnmod/tknife_hitplayer_fcs.wav",
	"wpnmod/tknife_throw3_fcs.wav"
};

enum
{
	katana_draw,
	katana_holster,
	katana_idle1,
	katana_idle2,
	katana_idle3,
	katana_fidget,
	katana_fslash,
	katana_lslash,
	katana_rslash,
	katana_block,
	katana_uslash,
	katana_jslash
};

enum
{
	KATANA_THROWING,
	KATANA_HIT,
	KATANA_REMOVEING
}

#define KATANA_OWNER 	pev_iuser1
#define KATANA_SEQUENCE	pev_iuser2
#define KATANA_COUNT	pev_iuser3
#define KATANA_VELOCITY pev_vuser1
#define TASK_SECOND	234521
new g_MaxPL;
#define IsPlayer(%1)		( 1 <= %1 <= g_MaxPL )
#define IsMonster(%1)		( pev ( %1, pev_flags ) & FL_MONSTER )
#define RemoveEntity(%1)	( engfunc ( EngFunc_RemoveEntity, %1 ) )
#define StopThinking(%1)	( set_pev ( %1, pev_velocity, Float:{ 0.0, 0.0, 0.0 } ) )
#define IsInWater_Origin(%1)	( engfunc ( EngFunc_PointContents, %1 ) == CONTENTS_WATER )

new Float:g_wpnidle[33];
new g_tKatanaClass;
new g_wpnid;
new bool:g_secondattack[33];


public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	// Add your code here...
	register_forward(FM_PlayerPreThink,"Katana_PreThink");
	register_forward(FM_Touch,"Katana_Touch");
	register_forward(FM_Think,"Katana_Think");
	create_weapon();
}

public plugin_precache()
{
	precache_model(g_P_MODEL);
	precache_model(g_V_MODEL);
	precache_model(g_W_MODEL);
	precache_sound(g_SOUND[0]);
	precache_sound(g_SOUND[1]);
	precache_sound(g_SOUND[2]);
	precache_sound(g_SOUND[3]);
	precache_sound(g_SOUND[4]);
	precache_sound(g_SOUND[5]);
	precache_sound(g_SOUND[6]);	
	//precache_generic(g_EVENT);
}

public plugin_modules()
{
	require_module("fakemeta");
}

public plugin_cfg()
{
	g_tKatanaClass = engfunc(EngFunc_AllocString,"info_target");
	g_MaxPL = get_maxplayers();
	return PLUGIN_CONTINUE;
}

create_weapon()
{
	new wpnid = wpn_register_weapon(g_WPN_NAME, g_WPN_SHORT);
	if(wpnid == -1) return PLUGIN_CONTINUE;
	
	// Strings
	wpn_set_string(wpnid,wpn_viewmodel,	g_V_MODEL);
	wpn_set_string(wpnid,wpn_weaponmodel,	g_P_MODEL);
	wpn_set_string(wpnid,wpn_worldmodel,	g_W_MODEL);
	
	// Event handlers
	wpn_register_event(wpnid,event_attack1,		"ev_attack1");
	wpn_register_event(wpnid,event_attack2,		"ev_attack2");
	wpn_register_event(wpnid,event_draw,		"ev_draw");
	wpn_register_event(wpnid,event_hide,		"ev_holsdrop");
	wpn_register_event(wpnid,event_weapondrop_pre,	"ev_holsdrop");

	// Floats
	wpn_set_float(wpnid,wpn_refire_rate1,		KATANA_SWINGRATE);
	wpn_set_float(wpnid,wpn_run_speed,		KATANA_RUN_SPEED);
	
	// Integers
	wpn_set_integer(wpnid,wpn_ammo1,		1);
	wpn_set_integer(wpnid,wpn_ammo2,		33);
	wpn_set_integer(wpnid,wpn_bullets_per_shot1,	0);
	wpn_set_integer(wpnid,wpn_bullets_per_shot2,	1);
	wpn_set_integer(wpnid,wpn_cost,			KATANA_COST);
	g_wpnid = wpnid;
	return PLUGIN_CONTINUE;
}

public Katana_PreThink(const id)
{
	if (is_user_alive(id))
	{
		if (wpn_uses_weapon(id, g_wpnid))
		{
			WeaponIdle(id);
		}
	}
	return FMRES_IGNORED;
}

public ev_attack1(id)
{ 

	SwingMotion(id);
	new Float:origin[3],Float:target[3],Float:TraceEPoint[3];
	pev(id,pev_origin,origin);
	velocity_by_aim(id, 128, target);
	xs_vec_add(target, origin, target);
	new body = TraceEnd(id,origin,target,TraceEPoint);

	emit_sound(id, CHAN_WEAPON, g_SOUND[3], 1.0, ATTN_NORM, 0, PITCH_NORM);

	if(get_distance_f(origin,TraceEPoint) <= KATANA_DISTANCE)
	{
		if(get_entity_alive(body) && !get_entity_godmode(body))
		{
			wpn_damage_user(g_wpnid,body,id,25,random_num(KATANA_DAMAGE_MIN,KATANA_DAMAGE_MAX),DMG_GENERIC, 1);
			emit_sound(id, CHAN_WEAPON, g_SOUND[2], 1.0, ATTN_NORM, 0, PITCH_NORM);
		} else { 
			emit_sound(id, CHAN_WEAPON, g_SOUND[1], 1.0, ATTN_NORM, 0, PITCH_NORM);
			FX_Sparks(TraceEPoint);
		}
	}
}

TraceEnd(id,const Float:origin[3],const Float:target[3],Float:TraceEndPos[3])
{
	engfunc(EngFunc_TraceLine, origin, target, DONT_IGNORE_MONSTERS, id, 0);
	static Float:fFraction,iHit,flags;
	get_tr2(0,TR_vecEndPos, TraceEndPos);
	get_tr2(0,TR_flFraction, fFraction);
	iHit = get_tr2(0, TR_pHit);
	TraceEndPos[1] -= 0.01;
	if (fFraction < 1.0)
	{
		if(!pev_valid(iHit)) return false;
		flags = pev(iHit, pev_flags);
		if(!(flags & (FL_CLIENT | FL_FAKECLIENT | FL_MONSTER)))
			return 0;
	}
	return iHit;
}

public ev_attack2(id)
{
	if(!g_secondattack[id])
	{	
		wpn_playanim(id,katana_holster);
		g_secondattack[id] = true;
		CreatetKatana(id+TASK_SECOND);
	}
}

bool:get_entity_alive(ent)
{
	new deadflag = pev(ent,pev_deadflag);
	if(deadflag != DEAD_NO)
		return false;
	return true;
}

bool:get_entity_godmode(ent)
{
	new flags = pev(ent, pev_flags);
	new Float:takeDamage;
	pev(ent, pev_takedamage, takeDamage);
	if(flags & FL_GODMODE || takeDamage == 0.0){ 
		return true;
	}
	return false;
}

SwingMotion(id)
{
	new i_rand; i_rand = random_num(katana_lslash,katana_rslash);
	wpn_playanim(id,i_rand);
	emit_sound(id,CHAN_WEAPON,g_SOUND[3], 1.0, ATTN_NORM, 0, PITCH_NORM);
}

WeaponIdle(const id)
{
	static Float:f_Time; f_Time = get_gametime ();
	static Float:f_Rand;

	if ( g_wpnidle[id] >= f_Time )
		return;

	f_Rand = random_float ( 0.0, 1.0 );
        
	if ( f_Rand < 0.75 )
	{
		wpn_playanim(id, random_num(katana_idle1,katana_idle3) );
		g_wpnidle[id] = get_gametime() + random_float( 10.0, 15.0 );
	}
	else
	{
		wpn_playanim (id, katana_fidget);
		g_wpnidle[id] = get_gametime() + 120.0 / 30.0;
	}
}

public ev_draw(id)
{
	wpn_playanim(id, katana_draw);
	emit_sound(id,CHAN_ITEM,g_SOUND[0],1.0,ATTN_NORM,0,PITCH_NORM);
	g_secondattack[id] = false;
}

public ev_holsdrop(id)
{
	wpn_playanim(id, katana_holster);
	g_secondattack[id] = false;
}

GetKatanaOrigin(id, Float:vf_Origin[])
{
	static Float:vf_vAngles[3],Float:vf_PunchAngles[3],Float:vf_AnglesAim[3];

	pev ( id, pev_v_angle, vf_vAngles );
	pev ( id, pev_punchangle, vf_PunchAngles );
	xs_vec_add(vf_vAngles,vf_PunchAngles,vf_AnglesAim);
	engfunc ( EngFunc_MakeVectors, vf_AnglesAim );

	static Float:vf_ViewOfs[3], Float:vf_Up[3];

	pev ( id, pev_origin, vf_Origin );
	pev ( id, pev_view_ofs, vf_ViewOfs );

	global_get ( glb_v_up, vf_Up );

	vf_Origin[0] = ( vf_Origin[0] + vf_ViewOfs[0] ) - vf_Up[0] * 2.0;
	vf_Origin[1] = ( vf_Origin[1] + vf_ViewOfs[1] ) - vf_Up[1] * 2.0;
	vf_Origin[2] = ( vf_Origin[2] + vf_ViewOfs[2] ) - vf_Up[2] * 2.0;
}

CreatetKatana(id)
{
	if(id > 32) id -= TASK_SECOND;

	//static Float:minsize[3]={-3.0,-8.0,-3.0};
	//static Float:maxsize[3]={3.0,8.0,3.0};
	new i_katana = engfunc ( EngFunc_CreateNamedEntity, g_tKatanaClass);
	set_pev(i_katana,pev_classname,g_WPN_CLASS);
	engfunc(EngFunc_SetModel, i_katana, g_W_MODEL);
	set_pev(i_katana,KATANA_OWNER,id);
	//set_pev(i_katana,pev_mins,minsize);
	//set_pev(i_katana,pev_maxs,maxsize);
	set_pev(i_katana,pev_movetype,MOVETYPE_FLY);
	set_pev(i_katana,pev_solid,SOLID_BBOX);
	//set_pev(i_katana,pev_gravity,0.5);
	set_pev(i_katana,pev_framerate,1.0);
	set_pev(i_katana,pev_dmg,1000.0);
	set_pev(i_katana,KATANA_SEQUENCE,KATANA_THROWING);

	new Float:origin[3],Float:velocity[3],Float:velOfs[3];
	//wpn_projectile_startpos(id, 40, 10, 4, origin);
	GetKatanaOrigin(id,origin);

	velocity_by_aim(id,KATANA_THROW_SPEED,velocity);
	velocity_by_aim(id,KATANA_THROW_OFFSET,velOfs);
	
	xs_vec_add(origin,velOfs,origin);
	
	engfunc(EngFunc_SetOrigin,i_katana,origin);
	set_pev(i_katana,pev_speed,KATANA_THROW_SPEED);
	set_pev(i_katana,pev_velocity,velocity);
	set_pev(i_katana,KATANA_VELOCITY,velocity);

	engfunc(EngFunc_VecToAngles, velocity, velocity );
	set_pev(i_katana,pev_angles, velocity);

	set_pev(i_katana,pev_nextthink,get_gametime()+0.2);
	//wpn_set_userinfo(id,usr_wpn_ammo1,wpn_has_weapon(id,g_wpnid),0);
	emit_sound(id,CHAN_WEAPON,g_SOUND[6],1.0,ATTN_NORM,0,PITCH_NORM);
	g_secondattack[id] = false;

	return PLUGIN_CONTINUE;
}

public Katana_Think(i_Ent)
{
	if(!IsKatana(i_Ent)) return FMRES_IGNORED;
	static Float:velc[3];
	pev(i_Ent,KATANA_VELOCITY,velc);
	switch(pev(i_Ent,KATANA_SEQUENCE))
	{
		case KATANA_THROWING:
		{
			set_pev(i_Ent,pev_velocity,velc);
		}
		case KATANA_HIT:
		{
			static cnt;cnt = pev(i_Ent,KATANA_COUNT);
			if(cnt < KATANA_REMOVETIME)
				set_pev(i_Ent,KATANA_COUNT,cnt+1);
			else
				RemoveEntity(i_Ent);
		}
	}
	if(pev_valid(i_Ent)) set_pev(i_Ent,pev_nextthink,get_gametime()+0.1);
	return FMRES_IGNORED;
}

public Katana_Touch(i_Ent, i_Other )
{
	if (!IsKatana(i_Ent)) return FMRES_IGNORED;

	static Float:vf_Origin[3];
	switch(pev(i_Ent,KATANA_SEQUENCE))
	{
		case KATANA_THROWING:
		{
			if(!get_entity_godmode(i_Other) && get_entity_alive(i_Other) && i_Other != pev(i_Ent,KATANA_OWNER))
			{
				if(IsPlayer(i_Other))
				{
					static i_Dmg; i_Dmg = random_num ( KATANA_DAMAGE_MIN, KATANA_DAMAGE_MAX);
					if (wpn_damage_user(g_wpnid, i_Other, pev (i_Ent , KATANA_OWNER), 0, i_Dmg, DMG_NEVERGIB ) )
					{
						pev (i_Other, pev_origin, vf_Origin);
						emit_sound(i_Ent,CHAN_BODY,g_SOUND[5],1.0, ATTN_NORM, 0, PITCH_NORM);
						wpn_create_blood (vf_Origin, i_Other, clamp (( i_Dmg * 2 ) / 10, 3, 16 ));
						RemoveEntity(i_Ent);
					}
				}
				else if (IsMonster ( i_Other ))
				{
					emit_sound(i_Ent,CHAN_BODY,g_SOUND[5],1.0, ATTN_NORM, 0, PITCH_NORM);
					wpn_damage_user (g_wpnid, i_Other, pev (i_Ent, KATANA_OWNER), 0, KATANA_DAMAGE_MONSTER, DMG_BULLET | DMG_NEVERGIB );
					RemoveEntity(i_Ent);
				}
			}
			if(pev_valid(i_Ent) && !IsPlayer(i_Other) && !IsMonster(i_Other))
			{
				set_pev(i_Ent,KATANA_SEQUENCE,KATANA_HIT);
				StopThinking(i_Ent);
				emit_sound(i_Ent,CHAN_WEAPON,g_SOUND[4],1.0, ATTN_NORM, 0, PITCH_NORM);
				pev (i_Ent, pev_origin, vf_Origin);
				if (!IsInWater_Origin( vf_Origin))
					FX_Sparks (vf_Origin);
			}
		}
		case KATANA_HIT:
		{
			if(IsPlayer(i_Other))
			{
				wpn_give_weapon(g_wpnid,i_Other,1,0);
				RemoveEntity(i_Ent);
			}
		}
	}
	if(pev_valid(i_Ent)) set_pev ( i_Ent, pev_nextthink, get_gametime () + 0.1 );
	return FMRES_IGNORED;
}

bool:IsKatana( const i_Ent )
{
	if ( !pev_valid ( i_Ent ) )
		return false;

	static s_Classname[32];
	pev ( i_Ent, pev_classname, s_Classname, 31 );

	if ( !FastCompare ( s_Classname, g_WPN_CLASS, 11 ) )
		return false;
        
	return true;
}

FX_Sparks(const Float:vf_KatanaOrigin[])
{
	engfunc(EngFunc_MessageBegin,MSG_PVS,SVC_TEMPENTITY,vf_KatanaOrigin,0);
	write_byte ( TE_SPARKS );
	engfunc(EngFunc_WriteCoord, vf_KatanaOrigin[0]);
	engfunc(EngFunc_WriteCoord, vf_KatanaOrigin[1]);
	engfunc(EngFunc_WriteCoord, vf_KatanaOrigin[2]);
	message_end();
}

bool:FastCompare(  const s_Source[], const s_What[], i_Wlen )
{
	static i; i = 0;

	while ( i_Wlen-- )
	{
		if ( s_Source[i] != s_What[i] )
		{
			return false;
		}

		++i;
	}

	return true;
}
